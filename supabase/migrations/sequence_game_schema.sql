-- Sequence Game Database Schema
-- Based on the specification provided

-- Add role column to existing badges table (players)
ALTER TABLE badges ADD COLUMN IF NOT EXISTS role text CHECK (role in ('capturer','defender')) DEFAULT 'capturer';

-- Create sequence_games table
CREATE TABLE IF NOT EXISTS sequence_games (
  game_id text PRIMARY KEY,
  mode text CHECK (mode in ('FREE','ORDERED')) NOT NULL,
  config jsonb NOT NULL,
  status text CHECK (status in ('pending','active','ended')) DEFAULT 'pending',
  started_at timestamptz,
  ended_at timestamptz,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create sequence_team_progress table: one row per team per game
CREATE TABLE IF NOT EXISTS sequence_team_progress (
  game_id text REFERENCES sequence_games(game_id) ON DELETE CASCADE,
  team_id text REFERENCES teams(id) ON DELETE CASCADE,
  idx integer DEFAULT 0,                        -- next required index for ORDERED mode
  points integer DEFAULT 0,                     -- useful for FREE mode or scoring
  window_expires_at timestamptz,                -- for time-limited step chains
  last_update timestamptz DEFAULT now(),
  meta jsonb DEFAULT '{}',                      -- for visited stations, streak_count, etc.
  PRIMARY KEY (game_id, team_id)
);

-- Create sequence_scans table: append-only, idempotent guard via unique scan_id
CREATE TABLE IF NOT EXISTS sequence_scans (
  scan_id text PRIMARY KEY,                    -- UUID generated by ESP32 for idempotency
  game_id text REFERENCES sequence_games(game_id) ON DELETE CASCADE,
  station_id text,                             -- Station identifier (name or UUID)
  rfid_uid text,                               -- RFID badge UID
  team_id text REFERENCES teams(id),
  outcome text,                                -- "PROGRESS", "WRONG_ORDER", "DEFENDER_LOCK", etc.
  ts timestamptz DEFAULT now(),
  meta jsonb DEFAULT '{}',
  response jsonb                               -- Cached API response for idempotency
);

-- Create sequence_station_locks table: used by defenders to force setbacks or lock a station
CREATE TABLE IF NOT EXISTS sequence_station_locks (
  game_id text REFERENCES sequence_games(game_id) ON DELETE CASCADE,
  station_id text,                             -- Station identifier
  locked_by_team text REFERENCES teams(id),
  locked_until timestamptz,
  created_at timestamptz DEFAULT now(),
  PRIMARY KEY (game_id, station_id)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_sequence_scans_game_team ON sequence_scans(game_id, team_id);
CREATE INDEX IF NOT EXISTS idx_sequence_scans_ts ON sequence_scans(ts DESC);
CREATE INDEX IF NOT EXISTS idx_sequence_progress_game ON sequence_team_progress(game_id);
CREATE INDEX IF NOT EXISTS idx_sequence_locks_game_station ON sequence_station_locks(game_id, station_id);
CREATE INDEX IF NOT EXISTS idx_sequence_locks_until ON sequence_station_locks(locked_until);

-- Add trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_sequence_game_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER sequence_games_updated_at
  BEFORE UPDATE ON sequence_games
  FOR EACH ROW
  EXECUTE FUNCTION update_sequence_game_updated_at();

-- Add trigger to update team progress timestamp
CREATE OR REPLACE FUNCTION update_sequence_progress_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.last_update = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER sequence_team_progress_updated
  BEFORE UPDATE ON sequence_team_progress
  FOR EACH ROW
  EXECUTE FUNCTION update_sequence_progress_timestamp();

-- Sample data for testing (optional)
-- INSERT INTO sequence_games (game_id, mode, config) VALUES 
-- ('seq_test_001', 'ORDERED', '{
--   "sequence": ["Station 1", "Station 2", "Station 3"],
--   "multi_scan": {"Station 1": 1, "Station 2": 2, "Station 3": 1},
--   "time_window_sec": 60,
--   "wrong_scan_penalty": {"type": "reset_to_zero"},
--   "defender_reset": {"mode": "lock_current", "cooldown_sec": 15},
--   "win_rule": {"type": "first_to_finish"},
--   "max_duration_sec": 600
-- }');

-- Grant permissions (adjust as needed for your setup)
-- GRANT ALL ON sequence_games TO authenticated;
-- GRANT ALL ON sequence_team_progress TO authenticated;
-- GRANT ALL ON sequence_scans TO authenticated;
-- GRANT ALL ON sequence_station_locks TO authenticated;
